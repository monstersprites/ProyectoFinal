// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace ProyectoFinal.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 3 "/home/elmer/Desktop/tareas_de_p3/ProyectoFinal/ProyectoFinal/Pages/EditarCliente.razor"
using System.IO;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/editar_cliente")]
    public partial class EditarCliente : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 66 "/home/elmer/Desktop/tareas_de_p3/ProyectoFinal/ProyectoFinal/Pages/EditarCliente.razor"
       

    [Inject]
    public IJSRuntime JS { get; set; }


    string cedula;
    string nombre;
    string apellido;
    string correo;
    string nacionalidad;
    string tsangre;
    string licencia;
    string fotopersona;
    string fotolicencia;


    public async Task searchCustomer()
    {

        String API = $"https://pruebasv4.herokuapp.com/getByID/{cedula}";

        var http = new HttpClient();

        var datos = await http.GetAsync(API);

        if (datos.IsSuccessStatusCode)
        {
            var resultados = JsonConvert.DeserializeObject<Cliente>(await datos.Content.ReadAsStringAsync());
            
            nombre = resultados.FIRSTNAME;
            apellido = resultados.LASTNAME;
            correo = resultados.EMAIL;
            nacionalidad = resultados.NATIONALITY;
            tsangre = resultados.BLOODTYPE;
            licencia = resultados.LICENSE;
            fotopersona = resultados.PHOTOPERSON;
            fotopersona = resultados.PHOTOLICENSE;
        }
        else
        {
            await JS.InvokeVoidAsync("alert", "Esa cedula no esta en el sistema, revise y vuelva a intentar");
        }
    }

    public async Task editCustomer()
    {

        var http = new HttpClient();

        var cliente = new Cliente
        {
            IDENTIFICATION = cedula,
            FIRSTNAME = nombre,
            LASTNAME = apellido,
            EMAIL = correo,
            NATIONALITY = nacionalidad,
            BLOODTYPE = tsangre,
            PHOTOPERSON = fotopersona,
            PHOTOLICENSE = fotolicencia,
            LICENSE = licencia
        };

        var jsonBody = JsonConvert.SerializeObject(cliente);
        var buffer = Encoding.UTF8.GetBytes(jsonBody);
        var byteContent = new ByteArrayContent(buffer);
        byteContent.Headers.ContentType = new MediaTypeHeaderValue("application/json");

        var response = await http.PutAsync("https://pruebasv4.herokuapp.com/updateCustomer/" + cedula, byteContent);

        if (response.IsSuccessStatusCode)
        {
            await JS.InvokeVoidAsync("alert", "Registro editado exitosamente");
            uriHelper.NavigateTo(uriHelper.Uri, forceLoad: true);
        }
        else
        {
            await JS.InvokeVoidAsync("alert", "Revise los datos que ha agregado y vuelva a intentar");
        }
    }

    public async Task LoadFilePersona(InputFileChangeEventArgs e)
    {
        try
        {
            using var reader = new StreamReader(e.File.OpenReadStream());

            string file = await reader.ReadToEndAsync();
            
            fotopersona = $"data:{e.File.ContentType};base64," + Convert.ToBase64String(Encoding.ASCII.GetBytes(file));
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    public async Task LoadFileLicencia(InputFileChangeEventArgs e)
    {
        try
        {
            using var reader = new StreamReader(e.File.OpenReadStream());

            string file = await reader.ReadToEndAsync();
            
            fotolicencia = $"data:{e.File.ContentType};base64," + Convert.ToBase64String(Encoding.ASCII.GetBytes(file));
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    public class Cliente
    {

        public string IDENTIFICATION { get; set; }

        public string FIRSTNAME { get; set; }

        public string LASTNAME { get; set; }

        public string EMAIL { get; set; }

        public string LICENSE { get; set; }

        public string NATIONALITY { get; set; }

        public string BLOODTYPE { get; set; }

        public string PHOTOPERSON { get; set; }

        public string PHOTOLICENSE { get; set; }

    }


#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager uriHelper { get; set; }
    }
}
#pragma warning restore 1591
