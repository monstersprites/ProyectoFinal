@page "/agregar_vehiculo"
@using System.IO
@inject NavigationManager uriHelper

<a href="/gestion_vehiculos"><img src="/imgs/arrow.png"></a>

<br />
<br />
<br />


<h2>Agregar vehiculo</h2>

<hr />

<form>
    <div class="mb-3">
        <label for="txtmarca" class="form-label">Marca</label>
        <input type="text" class="form-control" id="txtmarca" @bind-value="marca">
    </div>

    <div class="mb-3">
        <label for="txtmodelo" class="form-label">Modelo</label>
        <input type="text" class="form-control" id="txtmodelo" @bind-value="modelo">
    </div>

    <div class="mb-3">
        <label for="txtaño" class="form-label">Año</label>
        <input type="number" class="form-control" id="txtaño" @bind-value="año">
    </div>

    <div class="mb-3">
        <label for="txtcolor" class="form-label">Color</label>
        <input type="text" class="form-control" id="txtcolor" @bind-value="color">
    </div>

    <div class="mb-3">
        <label for="txtprecio" class="form-label">Precio por día(RD$)</label>
        <input type="number" class="form-control" id="txtprecio" @bind-value="precio">
    </div>

    <div class="custom-select">
        <label>Tipo:</label>
        <select @bind="tipo">
            <option value="Carro">Carro</option>
            <option value="Camioneta">Camioneta</option>
            <option value="Camión">Camión</option>
            <option value="Motocicleta">Motocicleta</option>
        </select>
    </div>

    <div class="mb-3">
        <label for="txtcapacidad" class="form-label">Capacidad de carga(Kg)</label>
        <input type="number" class="form-control" id="txtcapacidad" @bind-value="capacidad">
    </div>

    <div class="mb-3">
        <label for="txtpasajeros" class="form-label">Pasajeros</label>
        @pasajeros
        <input type="number" class="form-control" id="txtpasajeros" @bind-value="pasajeros">
    </div>

    <div class="mb-3">
        <label for="txtmatricula" class="form-label">Matricula</label>
        <input type="text" class="form-control" id="txtmatricula" @bind-value="matricula">
    </div>

    <div class="mb-3">
        <label for="txtseguro" class="form-label">Número de seguro</label>
        <input type="number" class="form-control" id="txtseguro" @bind-value="seguro">
    </div>

    <div class="mb-3">
        <label for="txtfoto" class="form-label">Foto</label>
        <InputFile OnChange="@LoadFile" />
    </div>

    <div class="mb-3">
        <label for="map" class="form-label">Seleccione una ubicacion en el mapa</label>
        <RadzenGoogleMap id="map" style="height: 400px" Zoom=@zoom Center=@(new GoogleMapPosition() { Lat = 18.98367097987177, Lng = -70.45763034294242 }) MapClick=@OnMapClick>
            <Markers>
                <RadzenGoogleMapMarker Position=@(new GoogleMapPosition() { Lat = latitud, Lng=longitud }) />
            </Markers>
        </RadzenGoogleMap>
    </div>

    <button class="btn btn-primary" @onclick="ApiRest" type="submit">Agregar</button>
</form>


@code {

    [Inject]
    public IJSRuntime JS { get; set; }

    int zoom = 7;
    string marca;
    string modelo;
    int año;
    string color;
    double precio;
    string tipo = "Carro";
    int capacidad;
    int pasajeros;
    string matricula;
    long seguro;
    string foto;
    double latitud;
    double longitud;
    
    void OnMapClick(GoogleMapClickEventArgs args)
    {
        latitud = args.Position.Lat;
        longitud = args.Position.Lng;
    }

    public async Task ApiRest()
    {
        var http = new HttpClient();

        var vehicle = new Vehicle
        {
            BRAND = marca,
            MODEL = modelo,
            YEAR = año,
            COLOUR = color,
            PRICEPERDAY = precio,
            TYPE = tipo,
            LOADCAPACITY = $"{capacidad}",
            PASSENGERS = pasajeros,
            Enrollment = matricula,
            INSURANCE_NO = $"{seguro}",
            PHOTO = foto,
            LATITUDE = $"{latitud}",
            LONGITUDE = $"{longitud}"
        };

        var jsonBody = JsonConvert.SerializeObject(vehicle);
        var buffer = Encoding.UTF8.GetBytes(jsonBody);
        var byteContent = new ByteArrayContent(buffer);
        byteContent.Headers.ContentType = new MediaTypeHeaderValue("application/json");

        var response = await http.PostAsync("https://pruebasv4.herokuapp.com/registervehicle", byteContent);

        if (response.IsSuccessStatusCode)
        {
            await JS.InvokeVoidAsync("alert", "Registro agregado exitosamente");
            uriHelper.NavigateTo(uriHelper.Uri, forceLoad: true);
        }
        else
        {
            await JS.InvokeVoidAsync("alert", "Revise los datos que ha agregadp y vuelva a intentar");
        }
    }

    public async Task LoadFile(InputFileChangeEventArgs e)
    {
        try
        {
            using var reader = new StreamReader(e.File.OpenReadStream());

            string file = await reader.ReadToEndAsync();
            
            foto = Convert.ToBase64String(Encoding.ASCII.GetBytes(file));
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }
    public class Vehicle
    {

        public string BRAND { get; set; }

        public string MODEL { get; set; }

        public int YEAR { get; set; }

        public string COLOUR { get; set; }

        public double PRICEPERDAY { get; set; }

        public string TYPE { get; set; }

        public string LOADCAPACITY { get; set; }

        public int PASSENGERS { get; set; }

        public string Enrollment { get; set; }

        public string INSURANCE_NO { get; set; }

        public string PHOTO { get; set; }

        public string LATITUDE { get; set; }

        public string LONGITUDE { get; set; }

    }

}
