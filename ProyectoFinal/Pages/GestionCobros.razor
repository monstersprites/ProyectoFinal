@page "/gestion_cobros"

@inject NavigationManager uriHelper

<h3>Gestión de cobros</h3>

<button class="btn btn-info" @onclick="listaCobros" type="button">Listar</button>

<br />

<table class="table">

    <tr>
        <th>ID</th>
        <th>Reserva</th>
        <th>Monto</th>
        <th>Pagado</th>
    </tr>

    @foreach (var c in cobros)
    {
        <tr>
            <td>@c.ID_PAYMENT</td>
            <td>@c.RESERVATION</td>
            <td>@c.BILL</td>
            <td>@c.PAYED</td>
        </tr>
    }

</table>

<br />

<hr />

<h4>Pagar</h4>
<br />
<br />
<input type="number" placeholder="Id del pago" @bind-value="id_pago"/>
<br />
<br />
<input type="number" placeholder="Cantidad a pagar" @bind-value="pago" />
<br />
<br />
<button class="btn btn-secondary" @onclick="pagar" type="button">Realizar pago</button>

@code {
    [Inject]
    public IJSRuntime JS { get; set; }
    string id_pago;
    int pago;

    List<Cobros> cobros = new List<Cobros>();

    public async Task listaCobros()
    {

        String API = $"https://pruebasv4.herokuapp.com/getAllPaymets";

        var http = new HttpClient();

        var datos = await http.GetAsync(API);

        try
        {
            cobros = JsonConvert.DeserializeObject<List<Cobros>>(await datos.Content.ReadAsStringAsync());
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
            await JS.InvokeVoidAsync("alert", "No hay cobros");
        }
}

    public async Task pagar()
    {
        var http = new HttpClient();

        var a_pagar = new Pago
        {
           PaymentId = id_pago,
           Pay = pago
        };

        var jsonBody = JsonConvert.SerializeObject(a_pagar);
        var buffer = Encoding.UTF8.GetBytes(jsonBody);
        var byteContent = new ByteArrayContent(buffer);
        byteContent.Headers.ContentType = new MediaTypeHeaderValue("application/json");

        var response = await http.PutAsync("https://pruebasv4.herokuapp.com/updatePayment", byteContent);

        if (response.IsSuccessStatusCode)
        {
            await JS.InvokeVoidAsync("alert", "Registro editado exitosamente");
            uriHelper.NavigateTo(uriHelper.Uri, forceLoad: true);
        }
        else
        {
            await JS.InvokeVoidAsync("alert", "Revise los datos que ha agregado y vuelva a intentar");
        }
    }

    public class Cobros
    {

        public int ID_PAYMENT { get; set; }
        public int RESERVATION { get; set; }
        public double BILL { get; set; }
        public int PAYED { get; set; }
        public bool CONDITION { get; set;}
    }

    public class Pago
    {
        public string PaymentId { get; set; }
        public int Pay { get; set; }
    }

}
